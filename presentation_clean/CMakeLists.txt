
CMAKE_MINIMUM_REQUIRED(VERSION 3.30)
PROJECT(LatexProject NONE)

set(CMAKE_VERBOSE_MAKEFILE ON)

macro(find_Python3_package PACKAGE VARIABLE)
  if(NOT DEFINED "${VARIABLE}")
    if(NOT CMAKE_REQUIRED_QUIET)
      # CMake 3.17+ use CHECK_START/CHECK_PASS/CHECK_FAIL
      message(STATUS "Looking for ${PACKAGE}")
    endif()
    if(Python3_VERSION VERSION_GREATER_EQUAL "3.8.0")
      # importlib.metadata was added in version 3.8
      set(CMD "from importlib.metadata import version; print(version('${PACKAGE}'), end='')")
      execute_process(
        COMMAND ${Python3_EXECUTABLE} -c "${CMD}"
        RESULT_VARIABLE EXIT_CODE
        OUTPUT_VARIABLE ${PACKAGE}_VERSION
        ERROR_QUIET
      )
    else()
      # importlib_metadata backport needed for older Python3 versions
      execute_process(
        COMMAND ${Python3_EXECUTABLE} -c "import importlib_metadata"
        RESULT_VARIABLE EXIT_CODE
        OUTPUT_QUIET ERROR_QUIET
      )
      if(EXIT_CODE EQUAL 0)
        set(CMD "from importlib_metadata import version; print(version('${PACKAGE}'), end='')")
        execute_process(
            COMMAND ${Python3_EXECUTABLE} -c "${CMD}"
            RESULT_VARIABLE EXIT_CODE
            OUTPUT_VARIABLE ${PACKAGE}_VERSION
            ERROR_QUIET
        )
      else()
        message(WARNING "importlib_metadata backport package required for Python <3.8")
      endif()
    endif()
    if(EXIT_CODE EQUAL 0)
      if(NOT CMAKE_REQUIRED_QUIET)
        message(STATUS "Looking for ${PACKAGE} - found version \"${${PACKAGE}_VERSION}\"")
      endif()
      set(${VARIABLE} 1 CACHE INTERNAL "Have package ${PACKAGE}")
    else()
      if(NOT CMAKE_REQUIRED_QUIET)
        message(STATUS "Looking for ${PACKAGE} - not found")
      endif()
      set(${VARIABLE} "" CACHE INTERNAL "Have package ${PACKAGE}")
    endif()
  endif()
endmacro()

FIND_PACKAGE(LATEX)
IF(LATEX_FOUND)
	IF(LUALATEX__FOUND)
		MESSAGE(STATUS "lualatex found - ${LUALATEX_COMPILER}")
	ENDIF()
	IF(BIBTEX_FOUND)
		MESSAGE(STATUS "bibtex found - ${BIBTEX_COMPILER}")
	ENDIF()
	IF(BIBER_FOUND)
		MESSAGE(STATUS "biber found - ${BIBER_COMPILER}")
	ENDIF()
	IF(MAKEINDEX_FOUND)
		MESSAGE(STATUS "makeindex found - ${MAKEINDEX_COMPILER}")
	ENDIF()
    IF(PDFLATEX_FOUND)
    	MESSAGE(STATUS "pdflatex found - ${PDFLATEX_COMPILER}")
	ENDIF()
ELSE()
	MESSAGE(ERROR "No latex tools found!")
ENDIF()

SET ( VENV_DEPENDENCIES "" ) 

FIND_PACKAGE(Python3 COMPONENTS Interpreter)
IF(Python3_Interpreter_FOUND)
	MESSAGE(STATUS "Python3 found")
	find_Python3_package("pyyaml" HAS_PYYAML)
	if(NOT HAS_PYYAML)
		MESSAGE(STATUS "No pyyaml found. Will install build dependencies in virtual environment.")
		# EXECUTE_PROCESS(
		# 	COMMAND "${Python3_EXECUTABLE}" -m pip install --user pyyaml
		# 	RESULT_VARIABLE PYYAML_INSTALL_RESULTS
		# )
		# MESSAGE("${PYYAML_INSTALL_RESULTS}")
		# EXECUTE_PROCESS(
		# 	COMMAND "${Python3_EXECUTABLE}" -m venv 
		# 	RESULT_VARIABLE PYYAML_INSTALL_RESULTS
		# )
		# MESSAGE("${PYYAML_INSTALL_RESULTS}")

		SET ( VENV_BUILD_PATH "${CMAKE_SOURCE_DIR}/build/venv" )
		SET ( VENV_PYTHON3_PATH "${VENV_BUILD_PATH}/bin/python3" )
		SET ( VENV_DEPENDENCIES "${VENV_PYTHON3_PATH}" ) 
		SET ( Python3_INTERPRETER "${VENV_PYTHON3_PATH}" ) 

		ADD_CUSTOM_COMMAND(
			OUTPUT "${VENV_PYTHON3_PATH}"
			COMMAND ${Python3_EXECUTABLE} -m venv ${VENV_BUILD_PATH}
			COMMAND ${VENV_PYTHON3_PATH} -m pip install pyyaml
			COMMENT "Create build virtual env"
		)

	endif()
	#EXECUTE_PROCESS(COMMAND ${Python3_EXECUTABLE} -m pip install pyyaml)
ELSE()
	MESSAGE(ERROR "No Python 3 found!")
ENDIF()

FIND_PROGRAM(
	RSYNC_CMD
	"rsync"
	REQUIRED
	DOC "rsync is required to copy files"
)
if(NOT RSYNC_CMD)
    message(FATAL_ERROR "No rsync found!")
endif()

# The directory where the final build data will be stored.
SET(LATEX_OUTPUT_PATH build)
SET(LATEX_ARTIFACTS_PATH_PDFS pdf)
# The source file containing the reference for cites.
# SET(BIB_REFERENCE_PATH ${CMAKE_SOURCE_DIR}/references.bib)

# Latex source file.
# SET( MAIN_TEX_BASE_FILENAME "main")
# SET( MAIN_TEX "${CMAKE_SOURCE_DIR}/src/aadg1/${MAIN_TEX_BASE_FILENAME}.tex")
# SET( MAIN_IDX "${LATEX_OUTPUT_PATH}/${MAIN_TEX_BASE_FILENAME}.idx")
# SET( MAIN_AUX "${LATEX_OUTPUT_PATH}/${MAIN_TEX_BASE_FILENAME}.aux")

# Directory where the source files are located.
SET( WORKINGDIR "${CMAKE_SOURCE_DIR}/src" )

SET( PDFLATEX_ARGS "--shell-escape" "--enable-pipes" "--enable-write18" )
SET( OUT_DIRECTORY_PDF "${CMAKE_SOURCE_DIR}/${LATEX_ARTIFACTS_PATH_PDFS}" )

SET( VARS_CONFIGURE_PATH "${CMAKE_SOURCE_DIR}/configure.py" )
SET( VARS_META_PATH "${CMAKE_SOURCE_DIR}/src/meta.yaml" )
SET( LATEX_COMMON_INCLUDE_TEX "${CMAKE_SOURCE_DIR}/src/common.tex" )
SET( LATEX_PREAMBLE_INCLUDE_TEX "${CMAKE_SOURCE_DIR}/src/preamble.tex" )
SET( LATEX_EPILOGUE_INCLUDE_TEX "${CMAKE_SOURCE_DIR}/src/epilogue.tex" )

SET ( COMMON_VARS_SPECS "date=CURRENT_DATE" "cmakeversion=${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" )

SET ( RSYNC_COMMAND "${RSYNC_CMD}" "-azhu" )
SET ( MKDIR_COMMAND "mkdir" "-p" )

set(LATEX_ALL_TARGETS "")

SET( COMMON_TEX_ARGS "-interaction" "nonstopmode" "-halt-on-error" "-file-line-error" )

FILE(GLOB TEX_MAIN_SOURCES "${CMAKE_SOURCE_DIR}/src/**/main.tex")
FOREACH(MAIN_TEX ${TEX_MAIN_SOURCES})

	GET_FILENAME_COMPONENT(TEX_JOB_DIR ${MAIN_TEX} DIRECTORY)
	GET_FILENAME_COMPONENT(TEX_JOB ${TEX_JOB_DIR} NAME)

	GET_FILENAME_COMPONENT(MAIN_TEX_NAME_WE ${TEX_JOB_DIR} NAME_WE)
	SET( MAIN_BIB "${TEX_JOB_DIR}/main.bib" )

	#GET_FILENAME_COMPONENT(MAIN_TEX_BASE_FILENAME ${MAIN_TEX} NAME_WE)
	SET( JOB_OUT_DIRECTORY_PREBUILD "${CMAKE_SOURCE_DIR}/${LATEX_OUTPUT_PATH}/${TEX_JOB}/_prebuild" )
	SET( JOB_OUT_DIRECTORY_BIBGEN "${CMAKE_SOURCE_DIR}/${LATEX_OUTPUT_PATH}/${TEX_JOB}/_bibgen" )
	SET( JOB_OUT_DIRECTORY_ASSEMBLY "${CMAKE_SOURCE_DIR}/${LATEX_OUTPUT_PATH}/${TEX_JOB}/_assembly" )
	SET( JOB_OUT_DIRECTORY_TMP "${CMAKE_SOURCE_DIR}/${LATEX_OUTPUT_PATH}/${TEX_JOB}/_tmp" )

	# BIBGEN
	if (EXISTS "${MAIN_BIB}")
		MESSAGE(STATUS "Found source ${TEX_JOB}: bibliography=TRUE")
		ADD_CUSTOM_COMMAND(
			OUTPUT "${JOB_OUT_DIRECTORY_PREBUILD}/main.tex"
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_PREBUILD}
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_BIBGEN}
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_ASSEMBLY}
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_TMP}
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_PREBUILD}/robustExternalize
			COMMAND ${RSYNC_COMMAND} ${TEX_JOB_DIR}/* ${JOB_OUT_DIRECTORY_PREBUILD}
			COMMAND ${RSYNC_COMMAND} ${LATEX_COMMON_INCLUDE_TEX} ${JOB_OUT_DIRECTORY_PREBUILD}
			COMMAND ${RSYNC_COMMAND} ${LATEX_PREAMBLE_INCLUDE_TEX} ${JOB_OUT_DIRECTORY_PREBUILD}
			COMMAND ${RSYNC_COMMAND} ${LATEX_EPILOGUE_INCLUDE_TEX} ${JOB_OUT_DIRECTORY_PREBUILD}
			#COMMAND ${BIBER_COMPILER} --tool --validate-datamodel ${JOB_OUT_DIRECTORY_PREBUILD}/main.bib
			WORKING_DIRECTORY ${WORKINGDIR}
			MAIN_DEPENDENCY ${MAIN_TEX}
			DEPENDS ${MAIN_TEX} ${LATEX_COMMON_INCLUDE_TEX} ${LATEX_PREAMBLE_INCLUDE_TEX} ${LATEX_EPILOGUE_INCLUDE_TEX} ${MAIN_BIB}
			COMMENT "${TEX_JOB}: Initiate prebuild resources for Latex with bibliography"
		)

		ADD_CUSTOM_COMMAND(
			OUTPUT "${JOB_OUT_DIRECTORY_PREBUILD}/vars.tex"
			COMMAND ${Python3_INTERPRETER} ${VARS_CONFIGURE_PATH} ${JOB_OUT_DIRECTORY_PREBUILD}/vars.tex ${VARS_META_PATH} "${JOB_OUT_DIRECTORY_PREBUILD}/main.tex" "draft=true" "hasbibliography=true" ${COMMON_VARS_SPECS}
			DEPENDS ${VENV_DEPENDENCIES} ${JOB_OUT_DIRECTORY_PREBUILD}/main.tex ${VARS_CONFIGURE_PATH} ${VARS_META_PATH} "${JOB_OUT_DIRECTORY_PREBUILD}/main.tex"
			COMMENT "${TEX_JOB}: Generate prebuild Latex variables"
		)

		ADD_CUSTOM_COMMAND(
			OUTPUT "${JOB_OUT_DIRECTORY_ASSEMBLY}/vars.tex"
			COMMAND ${Python3_INTERPRETER} ${VARS_CONFIGURE_PATH} ${JOB_OUT_DIRECTORY_ASSEMBLY}/vars.tex ${VARS_META_PATH} "${JOB_OUT_DIRECTORY_PREBUILD}/main.tex" "draft=false" "hasbibliography=true" ${COMMON_VARS_SPECS}
			DEPENDS ${VENV_DEPENDENCIES} "${JOB_OUT_DIRECTORY_BIBGEN}/main.aux" ${VARS_CONFIGURE_PATH} ${VARS_META_PATH} "${JOB_OUT_DIRECTORY_PREBUILD}/main.tex"
			COMMENT "${TEX_JOB}: Generate bib-gen Latex variables"
		)

		ADD_CUSTOM_COMMAND(
				OUTPUT "${JOB_OUT_DIRECTORY_PREBUILD}/main.aux"
				COMMAND ${PDFLATEX_COMPILER}  ${PDFLATEX_ARGS} -output-directory ${JOB_OUT_DIRECTORY_PREBUILD} -draftmode ${COMMON_TEX_ARGS} ${JOB_OUT_DIRECTORY_PREBUILD}/main.tex
				WORKING_DIRECTORY ${JOB_OUT_DIRECTORY_PREBUILD}
				DEPENDS ${JOB_OUT_DIRECTORY_PREBUILD}/main.tex "${JOB_OUT_DIRECTORY_PREBUILD}/vars.tex"
				COMMENT "${TEX_JOB}: Prebuild (draft) resources"
		)

		ADD_CUSTOM_COMMAND(
				OUTPUT "${JOB_OUT_DIRECTORY_BIBGEN}/main.aux"
				COMMAND ${RSYNC_COMMAND} --exclude vars.tex ${JOB_OUT_DIRECTORY_PREBUILD}/* ${JOB_OUT_DIRECTORY_BIBGEN}
				COMMAND ${BIBER_COMPILER} main
				WORKING_DIRECTORY ${JOB_OUT_DIRECTORY_BIBGEN}
				DEPENDS  ${JOB_OUT_DIRECTORY_PREBUILD}/main.aux
				COMMENT "${TEX_JOB}: Run biber bibliography compiler"
		)

		ADD_CUSTOM_COMMAND(
			OUTPUT ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.aux ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.pdf
			COMMAND ${RSYNC_COMMAND} --exclude vars.tex ${JOB_OUT_DIRECTORY_BIBGEN}/* ${JOB_OUT_DIRECTORY_ASSEMBLY}
			COMMAND ${PDFLATEX_COMPILER} ${PDFLATEX_ARGS} -output-directory ${JOB_OUT_DIRECTORY_ASSEMBLY} ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex ${COMMON_TEX_ARGS}
			WORKING_DIRECTORY ${JOB_OUT_DIRECTORY_ASSEMBLY}
			DEPENDS "${JOB_OUT_DIRECTORY_BIBGEN}/main.aux" "${JOB_OUT_DIRECTORY_ASSEMBLY}/vars.tex"
			COMMENT "${TEX_JOB}: Assembly final resources"
		)
	ELSE()
		MESSAGE(STATUS "Found source ${TEX_JOB}: bibliography=FALSE")
		ADD_CUSTOM_COMMAND(
			OUTPUT "${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex"
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_ASSEMBLY}
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_TMP}
			COMMAND ${MKDIR_COMMAND} ${JOB_OUT_DIRECTORY_ASSEMBLY}/robustExternalize
			COMMAND ${RSYNC_COMMAND} ${TEX_JOB_DIR}/* ${JOB_OUT_DIRECTORY_ASSEMBLY}
			COMMAND ${RSYNC_COMMAND} ${LATEX_COMMON_INCLUDE_TEX} ${JOB_OUT_DIRECTORY_ASSEMBLY}
			COMMAND ${RSYNC_COMMAND} ${LATEX_PREAMBLE_INCLUDE_TEX} ${JOB_OUT_DIRECTORY_ASSEMBLY}
			COMMAND ${RSYNC_COMMAND} ${LATEX_EPILOGUE_INCLUDE_TEX} ${JOB_OUT_DIRECTORY_ASSEMBLY}
			WORKING_DIRECTORY ${WORKINGDIR}
			MAIN_DEPENDENCY ${MAIN_TEX}
			DEPENDS ${MAIN_TEX} ${LATEX_COMMON_INCLUDE_TEX} ${LATEX_PREAMBLE_INCLUDE_TEX} ${LATEX_EPILOGUE_INCLUDE_TEX}
			COMMENT "${TEX_JOB}: Initiate resources for simple Latex assembly"
		)

		ADD_CUSTOM_COMMAND(
			OUTPUT "${JOB_OUT_DIRECTORY_ASSEMBLY}/vars.tex"
			COMMAND ${Python3_INTERPRETER} ${VARS_CONFIGURE_PATH} ${JOB_OUT_DIRECTORY_ASSEMBLY}/vars.tex ${VARS_META_PATH} "${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex" "draft=false" "hasbibliography=false" ${COMMON_VARS_SPECS}
			DEPENDS ${VENV_DEPENDENCIES} "${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex" ${VARS_CONFIGURE_PATH}  ${VARS_META_PATH}
			COMMENT "${TEX_JOB}: Generate assembly Latex variables"
		)

		ADD_CUSTOM_COMMAND(
			OUTPUT ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.aux ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.pdf
			COMMAND ${PDFLATEX_COMPILER} ${PDFLATEX_ARGS} -output-directory ${JOB_OUT_DIRECTORY_ASSEMBLY} ${COMMON_TEX_ARGS} ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex
			COMMAND ${PDFLATEX_COMPILER} ${PDFLATEX_ARGS} -output-directory ${JOB_OUT_DIRECTORY_ASSEMBLY} ${COMMON_TEX_ARGS} ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex
			WORKING_DIRECTORY ${JOB_OUT_DIRECTORY_ASSEMBLY}
			DEPENDS "${JOB_OUT_DIRECTORY_ASSEMBLY}/main.tex" "${JOB_OUT_DIRECTORY_ASSEMBLY}/vars.tex"
			COMMENT "${TEX_JOB}: Assembly final resources"
		)
	ENDIF()

	ADD_CUSTOM_COMMAND(
		OUTPUT ${OUT_DIRECTORY_PDF}/${TEX_JOB}.pdf
		COMMAND ${MKDIR_COMMAND} ${OUT_DIRECTORY_PDF}
		COMMAND ${RSYNC_COMMAND} ${JOB_OUT_DIRECTORY_ASSEMBLY}/main.pdf ${OUT_DIRECTORY_PDF}/${TEX_JOB}.pdf
		WORKING_DIRECTORY ${JOB_OUT_DIRECTORY_ASSEMBLY}
		DEPENDS "${JOB_OUT_DIRECTORY_ASSEMBLY}/main.pdf"
		COMMENT "${TEX_JOB}: Export artifacts"
	)
	LIST(APPEND LATEX_ALL_TARGETS "${OUT_DIRECTORY_PDF}/${TEX_JOB}.pdf")

ENDFOREACH()

ADD_CUSTOM_TARGET("latex-all"
	DEPENDS ${LATEX_ALL_TARGETS}
	COMMENT "Build all Latex resources"
)

ADD_CUSTOM_TARGET(all-formats ALL) # Entry point of execution.
ADD_DEPENDENCIES( all-formats "latex-all")